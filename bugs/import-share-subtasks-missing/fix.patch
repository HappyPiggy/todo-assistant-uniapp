diff --git a/pages/todobooks/composables/useTaskData.js b/pages/todobooks/composables/useTaskData.js
index 9290712..69defd4 100644
--- a/pages/todobooks/composables/useTaskData.js
+++ b/pages/todobooks/composables/useTaskData.js
@@ -243,17 +243,53 @@ export function useTaskData(bookId, allTasks = null) {
         return
       }
       
+      // 调试信息：分析接收到的任务数据
+      console.log(`🔍 [前端调试] 接收到任务数据总数: ${tasks.value.length}`)
+      const receivedParentTasks = tasks.value.filter(task => !task.parent_id)
+      const receivedChildTasks = tasks.value.filter(task => task.parent_id)
+      console.log(`🔍 [前端调试] 父任务: ${receivedParentTasks.length}个, 子任务: ${receivedChildTasks.length}个`)
+      
+      if (receivedChildTasks.length > 0) {
+        console.log('🔍 [前端调试] 子任务父子关系:')
+        receivedChildTasks.forEach(child => {
+          console.log(`  - 子任务 ${child._id} (${child.title}) -> 父任务 ${child.parent_id}`)
+        })
+      }
+      
       // 处理任务数据，确保格式正确
       const processedTasks = tasks.value.map(task => ({
         ...task,
         tags: Array.isArray(task.tags) ? task.tags : [],
-        expanded: false,
+        expanded: false, // 默认收起，后续会根据子任务情况调整
         subtasks: []
       }))
       
       // 组织父子关系：只显示父任务，子任务作为父任务的属性
+      console.log('🔍 [前端调试] 开始组织父子关系...')
       tasks.value = organizeParentChildTasks(processedTasks)
       
+      // 调试信息：验证组织后的结果
+      console.log(`🔍 [前端调试] 组织后的父任务数量: ${tasks.value.length}`)
+      let totalSubtasksCount = 0
+      tasks.value.forEach(parentTask => {
+        if (parentTask.subtasks && parentTask.subtasks.length > 0) {
+          console.log(`🔍 [前端调试] 父任务 ${parentTask._id} (${parentTask.title}) 包含 ${parentTask.subtasks.length} 个子任务`)
+          totalSubtasksCount += parentTask.subtasks.length
+        }
+      })
+      console.log(`🔍 [前端调试] 总计子任务数量: ${totalSubtasksCount}`)
+      
+      // 临时修复：为有子任务的父任务自动展开，便于用户看到子任务
+      if (totalSubtasksCount > 0) {
+        console.log('🔍 [前端调试] 检测到子任务，自动展开相关父任务以便用户查看')
+        tasks.value.forEach(parentTask => {
+          if (parentTask.subtasks && parentTask.subtasks.length > 0) {
+            console.log(`🔍 [前端调试] 自动展开有子任务的父任务: ${parentTask._id} (${parentTask.title})`)
+            parentTask.expanded = true
+          }
+        })
+      }
+      
       // 跳过批量加载评论数据，改为按需加载
       // 原有批量加载逻辑保留作为降级方案
       // await loadTasksCommentCounts(processedTasks)
diff --git a/pages/todobooks/utils/taskUtils.js b/pages/todobooks/utils/taskUtils.js
index ae2ad49..ad59cd3 100644
--- a/pages/todobooks/utils/taskUtils.js
+++ b/pages/todobooks/utils/taskUtils.js
@@ -6,6 +6,8 @@ import { TASK_CONSTANTS } from './constants.js'
  * @returns {Array} 组织后的父任务数组（包含子任务）
  */
 export function organizeParentChildTasks(allTasks) {
+  console.log(`🔍 [taskUtils调试] 开始组织 ${allTasks.length} 个任务的父子关系`)
+  
   // 创建任务映射
   const taskMap = {}
   allTasks.forEach(task => {
@@ -28,15 +30,27 @@ export function organizeParentChildTasks(allTasks) {
     }
   })
   
+  console.log(`🔍 [taskUtils调试] 分离结果: 父任务 ${parentTasks.length}个, 子任务 ${childTasks.length}个`)
+  
   // 将子任务关联到父任务
+  let successfullyLinked = 0
+  let failedToLink = 0
+  
   childTasks.forEach(childTask => {
     const parentTask = taskMap[childTask.parent_id]
     if (parentTask) {
       parentTask.subtasks.push(taskMap[childTask._id])
+      successfullyLinked++
+      console.log(`🔍 [taskUtils调试] 成功关联: 子任务 ${childTask._id} (${childTask.title}) -> 父任务 ${childTask.parent_id}`)
+    } else {
+      failedToLink++
+      console.error(`🔍 [taskUtils调试] 关联失败: 子任务 ${childTask._id} (${childTask.title}) 找不到父任务 ${childTask.parent_id}`)
     }
   })
   
-  // 对子任务进行排序
+  console.log(`🔍 [taskUtils调试] 关联结果: 成功 ${successfullyLinked}个, 失败 ${failedToLink}个`)
+  
+  // 对子任务进行排序，并更新父任务的子任务计数
   parentTasks.forEach(parent => {
     if (parent.subtasks.length > 0) {
       parent.subtasks.sort((a, b) => {
@@ -46,6 +60,16 @@ export function organizeParentChildTasks(allTasks) {
         }
         return new Date(a.created_at) - new Date(b.created_at)
       })
+      
+      // 更新父任务的子任务计数和完成计数
+      parent.subtask_count = parent.subtasks.length
+      parent.completed_subtask_count = parent.subtasks.filter(subtask => subtask.status === 'completed').length
+      
+      console.log(`🔍 [taskUtils调试] 更新父任务 ${parent._id} 子任务计数: ${parent.subtask_count}, 完成计数: ${parent.completed_subtask_count}`)
+    } else {
+      // 确保没有子任务的父任务计数为0
+      parent.subtask_count = 0
+      parent.completed_subtask_count = 0
     }
   })
   
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
index a5cebfc..9ea5482 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
@@ -65,6 +65,39 @@ module.exports = async function importByCode({ shareCode }) {
       titleSuffix: '（来自分享）'
     })
     
+    // 验证克隆结果的数据完整性
+    console.log('🔍 [导入验证] 开始验证导入结果的数据完整性...')
+    try {
+      const taskCollection = db.collection('todoitems')
+      const importedTasksResult = await taskCollection.where({
+        todobook_id: newBookId
+      }).get()
+      
+      const importedParentTasks = importedTasksResult.data.filter(task => !task.parent_id)
+      const importedChildTasks = importedTasksResult.data.filter(task => task.parent_id)
+      
+      console.log(`🔍 [导入验证] 导入的项目册 ${newBookId}: 总任务 ${importedTasksResult.data.length}个, 父任务 ${importedParentTasks.length}个, 子任务 ${importedChildTasks.length}个`)
+      
+      // 验证子任务的父子关系是否正确
+      let validChildTasks = 0
+      let invalidChildTasks = 0
+      
+      importedChildTasks.forEach(childTask => {
+        const parentExists = importedParentTasks.some(parent => parent._id === childTask.parent_id)
+        if (parentExists) {
+          validChildTasks++
+        } else {
+          invalidChildTasks++
+          console.error(`🔍 [导入验证] 发现无效子任务: ${childTask._id} (${childTask.title}) 的父任务 ${childTask.parent_id} 不存在`)
+        }
+      })
+      
+      console.log(`🔍 [导入验证] 子任务关系验证: 有效 ${validChildTasks}个, 无效 ${invalidChildTasks}个`)
+      
+    } catch (verifyError) {
+      console.error('🔍 [导入验证] 验证导入结果时出错:', verifyError)
+    }
+    
     // 6. 更新分享统计
     await shareCollection.doc(shareRecord._id).update({
       share_count: db.command.inc(1),
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
index 04405c8..5411a75 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
@@ -77,6 +77,20 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
       todobook_id: originalBookId
     }).orderBy('sort_order', 'asc').get()
     
+    // 调试信息：分析原始任务结构
+    console.log(`🔍 [克隆调试] 原项目册 ${originalBookId} 总任务数: ${tasksResult.data.length}`)
+    const parentTasks = tasksResult.data.filter(task => !task.parent_id)
+    const childTasks = tasksResult.data.filter(task => task.parent_id)
+    console.log(`🔍 [克隆调试] 父任务数: ${parentTasks.length}, 子任务数: ${childTasks.length}`)
+    
+    // 打印父子关系映射
+    if (childTasks.length > 0) {
+      console.log('🔍 [克隆调试] 子任务父子关系:')
+      childTasks.forEach(child => {
+        console.log(`  - 子任务 ${child._id} (${child.title}) -> 父任务 ${child.parent_id}`)
+      })
+    }
+    
     let taskCount = 0
     const taskIdMapping = new Map() // 记录原任务ID到新任务ID的映射
     
@@ -106,9 +120,15 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
       const newTaskResult = await taskCollection.add(newTaskData)
       taskIdMapping.set(originalTask._id, newTaskResult.id)
       taskCount++
+      
+      // 调试信息：记录任务克隆
+      console.log(`🔍 [克隆调试] 克隆任务: ${originalTask._id} -> ${newTaskResult.id} (${originalTask.title})`)
     }
     
     // 4. 更新任务的parent_id关系
+    console.log('🔍 [克隆调试] 开始更新父子关系...')
+    let parentChildUpdateCount = 0
+    
     for (const [originalTaskId, newTaskId] of taskIdMapping) {
       const originalTaskResult = await taskCollection.where({
         todobook_id: originalBookId,
@@ -122,10 +142,32 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
           await taskCollection.doc(newTaskId).update({
             parent_id: newParentId
           })
+          
+          // 调试信息：记录父子关系更新
+          console.log(`🔍 [克隆调试] 更新父子关系: 任务 ${newTaskId} 的父任务设为 ${newParentId}`)
+          parentChildUpdateCount++
         }
       }
     }
     
+    console.log(`🔍 [克隆调试] 父子关系更新完成，共更新 ${parentChildUpdateCount} 个子任务`)
+    
+    // 验证最终结果
+    const finalTasksResult = await taskCollection.where({
+      todobook_id: newBookId
+    }).get()
+    
+    const finalParentTasks = finalTasksResult.data.filter(task => !task.parent_id)
+    const finalChildTasks = finalTasksResult.data.filter(task => task.parent_id)
+    console.log(`🔍 [克隆调试] 克隆结果验证 - 新项目册 ${newBookId}: 父任务 ${finalParentTasks.length}个, 子任务 ${finalChildTasks.length}个`)
+    
+    if (finalChildTasks.length > 0) {
+      console.log('🔍 [克隆调试] 新项目册子任务关系:')
+      finalChildTasks.forEach(child => {
+        console.log(`  - 子任务 ${child._id} (${child.title}) -> 父任务 ${child.parent_id}`)
+      })
+    }
+    
     // 5. 评论已在任务克隆时处理完毕
     
     // 6. 更新项目册任务计数
