diff --git a/pages/todobooks/components/statistics/PieChartCanvas.vue b/pages/todobooks/components/statistics/PieChartCanvas.vue
index ef0ca62..486bd8b 100644
--- a/pages/todobooks/components/statistics/PieChartCanvas.vue
+++ b/pages/todobooks/components/statistics/PieChartCanvas.vue
@@ -67,14 +67,41 @@ const totalAmount = computed(() => {
   return props.chartData.reduce((sum, item) => sum + (item.amount || 0), 0)
 })
 
-// 初始化Canvas上下文
-const initCanvas = () => {
+// 初始化Canvas上下文 - 改进版本
+const initCanvas = (retryCount = 0) => {
   try {
+    console.log(`PieChartCanvas - 尝试初始化Canvas (第${retryCount + 1}次)`)
     ctx.value = uni.createCanvasContext(canvasId)
-    emit('canvas-ready')
-    return true
+    
+    if (ctx.value) {
+      console.log('PieChartCanvas - Canvas上下文初始化成功')
+      emit('canvas-ready')
+      
+      // 初始化成功后，如果有数据就立即绘制
+      setTimeout(() => {
+        if (props.chartData && props.chartData.length > 0) {
+          console.log('PieChartCanvas - 初始化完成，开始绘制图表')
+          drawPieChart(true) // 首次绘制使用动画
+        }
+      }, 100)
+      
+      return true
+    } else {
+      throw new Error('createCanvasContext 返回了 null 或 undefined')
+    }
   } catch (error) {
-    console.error('Canvas初始化失败:', error)
+    console.error(`Canvas初始化失败 (第${retryCount + 1}次):`, error)
+    
+    // 最多重试3次，每次间隔更长
+    if (retryCount < 3) {
+      const delay = (retryCount + 1) * 200 // 200ms, 400ms, 600ms
+      console.log(`PieChartCanvas - ${delay}ms后重试初始化`)
+      setTimeout(() => {
+        initCanvas(retryCount + 1)
+      }, delay)
+    } else {
+      console.error('PieChartCanvas - Canvas初始化重试次数用尽，放弃初始化')
+    }
     return false
   }
 }
@@ -441,14 +468,13 @@ onMounted(() => {
   console.log('PieChartCanvas 挂载完成')
   
-  nextTick(() => {
-    if (initCanvas()) {
-      // 延迟绘制，确保Canvas准备就绪，首次加载使用动画
-      setTimeout(() => {
-        drawPieChart(true) // 首次绘制使用动画
-      }, 100)
-    }
-  })
+  // 使用更长的延迟确保DOM完全渲染
+  setTimeout(() => {
+    nextTick(() => {
+      console.log('PieChartCanvas - 开始初始化Canvas')
+      initCanvas() // 初始化过程中会自动处理重试和后续绘制
+    })
+  }, 300) // 增加到300ms延迟
 })
 
 // 清理动画资源
diff --git a/pages/todobooks/components/statistics/EnhancedExpensePieChart.vue b/pages/todobooks/components/statistics/EnhancedExpensePieChart.vue
index 5632396..3da9520 100644
--- a/pages/todobooks/components/statistics/EnhancedExpensePieChart.vue
+++ b/pages/todobooks/components/statistics/EnhancedExpensePieChart.vue
@@ -110,7 +110,7 @@ const canvasReady = ref(false)
 
 // 错误状态
 const error = ref(null)
-const loading = ref(false) // 改为默认不加载状态
+const loading = ref(true) // 默认为加载状态，等待数据
 
 // Canvas 尺寸计算
 const canvasWidth = computed(() => props.width)
@@ -275,22 +275,51 @@ const handleCanvasReady = () => {
   }
 }
 
-// 监听数据变化，重置选中状态
+// 监听数据变化，重置选中状态和管理加载状态
 watch(() => props.expenseData, (newData, oldData) => {
   try {
+    console.log('EnhancedExpensePieChart - 监听到数据变化:', {
+      newData: newData?.length || 0,
+      oldData: oldData?.length || 0
+    })
+    
     if (!newData || newData.length === 0) {
+      // 数据为空时的处理
       selectedSegment.value = null
       centerMode.value = 'total'
+      loading.value = true // 保持加载状态
       error.value = null
     } else {
-      // 清除之前的错误状态
-      if (error.value) {
-        error.value = null
-      }
+      // 有数据时的处理
+      selectedSegment.value = null
+      centerMode.value = 'total'
+      loading.value = false // 取消加载状态
+      error.value = null
+      
+      // 延迟触发重绘，确保组件完全渲染
+      setTimeout(() => {
+        uni.$nextTick(() => {
+          if (canvasRef.value && canvasRef.value.redraw) {
+            console.log('延迟重绘：数据更新，触发Canvas重绘')
+            canvasRef.value.redraw()
+          }
+        })
+      }, 100) // 延迟100ms
+      
+      // 如果100ms后仍未成功，再次尝试
+      setTimeout(() => {
+        uni.$nextTick(() => {
+          if (canvasRef.value && canvasRef.value.redraw) {
+            console.log('二次重绘：确保图表显示')
+            canvasRef.value.redraw()
+          }
+        })
+      }, 300) // 延迟300ms
     }
   } catch (err) {
     console.error('数据变化监听出错:', err)
     error.value = '数据处理错误'
+    loading.value = false
   }
 }, { deep: true, immediate: true })
 
diff --git a/pages/todobooks/components/statistics/StatisticsExpenseTab.vue b/pages/todobooks/components/statistics/StatisticsExpenseTab.vue
index c7fa920..07e314b 100644
--- a/pages/todobooks/components/statistics/StatisticsExpenseTab.vue
+++ b/pages/todobooks/components/statistics/StatisticsExpenseTab.vue
@@ -57,7 +57,7 @@
 </template>
 
 <script setup>
-import { ref, computed, defineProps, defineEmits, onMounted } from 'vue'
+import { ref, computed, defineProps, defineEmits, onMounted, watch } from 'vue'
 import EnhancedExpensePieChart from './EnhancedExpensePieChart.vue'
 
 const props = defineProps({
@@ -170,6 +170,12 @@ const handleSegmentClick = (segmentId, segmentData) => {
 const handleChartReady = () => {
 }
 
+// 监听tagGroups数据变化，确保图表组件能及时响应
+watch(() => props.tagGroups, (newTagGroups) => {
+  console.log('StatisticsExpenseTab - tagGroups数据变化:', newTagGroups?.length || 0)
+  // 数据变化时，可以在这里进行额外的处理
+}, { deep: true })
+
 // 恢复用户偏好
 onMounted(() => {
   const savedMode = uni.getStorageSync('expense_view_mode')
diff --git a/pages/todobooks/statistics.vue b/pages/todobooks/statistics.vue
index be5b791..dc2119b 100644
--- a/pages/todobooks/statistics.vue
+++ b/pages/todobooks/statistics.vue
@@ -133,20 +133,29 @@ const handleTabChange = (tabKey) => {
       })
     }
     
-    activeTab.value = tabKey
-    console.log('切换到Tab:', tabKey)
-    
-    // 如果切换到消费统计，确保数据已加载并等待数据准备
+    // 如果切换到消费统计，确保数据已加载
     if (tabKey === 'expense') {
-      if (!expenseData.value.totalBudget && !expenseData.value.totalActualCost) {
+      // 检查是否需要重新加载数据
+      const needsDataLoad = !expenseData.value.totalBudget && !expenseData.value.totalActualCost
+      const needsTagGroups = !tagGroups.value || tagGroups.value.length === 0
+      
+      if (needsDataLoad || needsTagGroups) {
+        // 先设置loading状态，然后加载数据
+        console.log('切换到消费统计Tab，正在加载数据...')
         loadExpenseData()
-      }
-      // 确保标签组数据也已准备好
-      if (expenseResult.value && (!tagGroups.value || tagGroups.value.length === 0)) {
-        const defaultView = 'actual' // 默认显示实际支出
-        tagGroups.value = expenseResult.value.actualTagGroups
+        
+        // 使用nextTick确保数据更新后再切换tab
+        uni.$nextTick(() => {
+          activeTab.value = tabKey
+          console.log('数据加载完成，切换到Tab:', tabKey)
+        })
+        return
       }
     }
+    
+    // 正常情况下直接切换
+    activeTab.value = tabKey
+    console.log('切换到Tab:', tabKey)
   }
 }
 