diff --git a/CLAUDE.md b/CLAUDE.md
index 5f8e173..73d025c 100644
--- a/CLAUDE.md
+++ b/CLAUDE.md
@@ -6,11 +6,6 @@ This file provides guidance to Claude Code (claude.ai/code) when working with co
 
 This is a modern task management application built with **uni-app + Vue 3 + uniCloud**, supporting hierarchical task management and real-time cloud synchronization. The application uses a B/S architecture and supports multi-platform deployment (H5, mini-programs, native apps).
 
-## 工作流
-
-1.当用户提出新需求时，请遵守此文档./spec_workflow.md的工作流
-2.当用户提出bug修复时，请遵守此文档./bug_workflow.md的工作流
-
 ## Tech Stack
 
 ### Frontend Architecture
diff --git a/pages/list/list.vue b/pages/list/list.vue
index 18e1eec..aa24f1c 100644
--- a/pages/list/list.vue
+++ b/pages/list/list.vue
@@ -263,7 +263,19 @@ const onSearchConfirm = () => {
 // 事件处理方法
 const onCacheUpdated = (updatedBooks) => {
 	console.log('更新前页面数据条数:', todoBooks.value.length)
-	todoBooks.value = updatedBooks
+	
+	// 参数验证和防护：确保 updatedBooks 是有效数组
+	if (Array.isArray(updatedBooks)) {
+		todoBooks.value = updatedBooks
+		console.log('更新后页面数据条数:', updatedBooks.length)
+	} else {
+		console.warn('onCacheUpdated 接收到无效参数:', updatedBooks, '，保持当前数据不变')
+		// 如果接收到无效参数，重新加载数据
+		if (hasLogin.value) {
+			console.log('重新加载项目册数据...')
+			loadTodoBooksOptimized()
+		}
+	}
 	loadMoreStatus.value = 'noMore'
 }
 
diff --git a/pages/settings/components/ImportShare.vue b/pages/settings/components/ImportShare.vue
index 41244e7..bd66699 100644
--- a/pages/settings/components/ImportShare.vue
+++ b/pages/settings/components/ImportShare.vue
@@ -3,7 +3,7 @@
     <!-- 输入区域 -->
     <view class="input-section">
       <view class="input-container">
-        <text class="input-label">请输入6位分享码</text>
+        <text class="input-label">请输入6位分享码（支持大小写）</text>
         <input 
           class="share-code-input"
           v-model="shareCode"
@@ -139,7 +139,7 @@ const handleInput = (e) => {
 
 const validateShareCode = () => {
   if (shareCode.value && !isValidShareCode.value) {
-    inputError.value = '请输入6位字母数字组合'
+    inputError.value = '请输入6位字母和数字组合'
   } else {
     inputError.value = ''
   }
@@ -235,7 +235,17 @@ onMounted(() => {
 
 <style lang="scss" scoped>
 .import-share {
-  padding: 20px;
+  padding: 16rpx 20rpx; // 使用rpx单位，在小屏幕上减少padding
+  // 防止组件溢出
+  width: 100%;
+  max-width: 100%;
+  box-sizing: border-box;
+  overflow-x: hidden;
+  
+  // 小屏幕适配
+  @media (max-width: 375px) {
+    padding: 12rpx 16rpx;
+  }
 }
 
 .input-section {
@@ -254,15 +264,20 @@ onMounted(() => {
     .share-code-input {
       width: 100%;
       height: 48px;
-      padding: 0 16px;
-      font-size: 18px;
+      padding: 0 8px; // 进一步减少水平内边距防止溢出
+      font-size: 15px; // 进一步减小字体
       font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
       font-weight: 600;
-      letter-spacing: 2px;
+      letter-spacing: 0.5px; // 进一步减小字符间距
       text-align: center;
       border: 2px solid #e9ecef;
       border-radius: 8px;
       background-color: #ffffff;
+      box-sizing: border-box;
+      // 防止内容溢出
+      max-width: 100%;
+      min-width: 0;
+      overflow: hidden;
       
       &:focus {
         border-color: #007AFF;
@@ -274,6 +289,20 @@ onMounted(() => {
         font-weight: normal;
         letter-spacing: normal;
       }
+      
+      // 小屏幕适配
+      @media (max-width: 375px) {
+        font-size: 13px;
+        letter-spacing: 0.2px;
+        padding: 0 6px;
+      }
+      
+      // 超小屏幕适配
+      @media (max-width: 320px) {
+        font-size: 12px;
+        letter-spacing: 0px;
+        padding: 0 4px;
+      }
     }
     
     .error-text {
@@ -453,6 +482,11 @@ onMounted(() => {
 }
 
 .history-section {
+  // 防止历史记录区域溢出
+  width: 100%;
+  max-width: 100%;
+  overflow: hidden;
+  box-sizing: border-box;
   .history-header {
     display: flex;
     align-items: center;
@@ -468,23 +502,42 @@ onMounted(() => {
   .history-codes {
     display: flex;
     flex-wrap: wrap;
-    gap: 8px;
+    gap: 4px; // 进一步减小间距防止溢出
+    // 防止历史记录溢出
+    width: 100%;
+    max-width: 100%;
+    overflow: hidden;
+    box-sizing: border-box;
     
     .history-code {
-      padding: 8px 12px;
+      padding: 6px 10px; // 减小内边距
       background-color: #f8f9fa;
       border: 1px solid #e9ecef;
       border-radius: 6px;
+      max-width: calc(45% - 2px); // 更严格的最大宽度限制，防止溢出
+      box-sizing: border-box;
       
       &:active {
         background-color: #e9ecef;
       }
       
       .code-text {
-        font-size: 14px;
+        font-size: 13px; // 减小字体
         font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
         color: #007AFF;
         font-weight: 500;
+        word-break: break-all;
+        overflow-wrap: break-word;
+      }
+      
+      // 小屏幕适配
+      @media (max-width: 375px) {
+        padding: 4px 8px;
+        max-width: calc(33.33% - 4px);
+        
+        .code-text {
+          font-size: 12px;
+        }
       }
     }
   }
diff --git a/pages/settings/components/ShareList.vue b/pages/settings/components/ShareList.vue
index e8bc019..a849497 100644
--- a/pages/settings/components/ShareList.vue
+++ b/pages/settings/components/ShareList.vue
@@ -111,8 +111,8 @@ const props = defineProps({
 // Emits
 const emit = defineEmits(['delete', 'refresh'])
 
-// 组合式函数
-const { deleteShare, copyToClipboard } = useShareData()
+// 组合式函数 - 只保留复制功能
+const { copyToClipboard } = useShareData()
 
 // 响应式数据
 const deletePopupRef = ref(null)
@@ -178,17 +178,32 @@ const handleDelete = async () => {
   deleting.value = true
   
   try {
-    await deleteShare(currentShare.value.share_id)
-    
-    // 通知父组件删除成功
-    emit('delete', currentShare.value.share_id)
-    
-    // 关闭弹窗
-    deletePopupRef.value?.close()
-    currentShare.value = null
+    // 直接调用云函数删除，不要自行刷新数据
+    const todoBookCo = uniCloud.importObject('todobook-co')
+    const result = await todoBookCo.deleteShare(currentShare.value.share_id)
     
+    if (result.code === 0) {
+      // 通知父组件删除成功，由父组件负责刷新数据
+      emit('delete', currentShare.value.share_id)
+      
+      // 关闭弹窗
+      deletePopupRef.value?.close()
+      currentShare.value = null
+      
+      // 显示成功提示
+      uni.showToast({
+        title: '分享已删除',
+        icon: 'success'
+      })
+    } else {
+      throw new Error(result.message)
+    }
   } catch (error) {
     console.error('删除分享失败:', error)
+    uni.showToast({
+      title: error.message || '删除失败',
+      icon: 'none'
+    })
   } finally {
     deleting.value = false
   }
@@ -198,6 +213,11 @@ const handleDelete = async () => {
 <style lang="scss" scoped>
 .share-list {
   min-height: 200px;
+  // 防止组件溢出
+  width: 100%;
+  max-width: 100%;
+  box-sizing: border-box;
+  overflow-x: hidden;
 }
 
 .loading-state {
@@ -234,9 +254,17 @@ const handleDelete = async () => {
 }
 
 .share-items {
+  // 确保列表容器不会超出
+  width: 100%;
+  overflow: hidden;
+  
   .share-item {
-    padding: 20px;
+    padding: 12rpx 16rpx; // 使用rpx单位，减少内边距
     border-bottom: 1px solid #f0f0f0;
+    // 确保每个分享项不会超出容器
+    width: 100%;
+    box-sizing: border-box;
+    overflow: hidden;
     
     &:last-child {
       border-bottom: none;
@@ -262,36 +290,88 @@ const handleDelete = async () => {
   
   .project-details {
     flex: 1;
+    min-width: 0;
+    // 确保项目详情不会超出可用空间 - 更严格的控制
+    max-width: calc(100% - 60px); // 更保守的计算方式
+    width: calc(100% - 60px);
+    overflow: hidden;
+    word-wrap: break-word;
+    word-break: break-all;
+    
+    // 小屏幕适配
+    @media (max-width: 375px) {
+      max-width: calc(100% - 55px);
+      width: calc(100% - 55px);
+    }
+    
+    @media (max-width: 320px) {
+      max-width: calc(100% - 50px);
+      width: calc(100% - 50px);
+    }
     
     .project-name {
-      display: block;
-      font-size: 16px;
+      display: -webkit-box;
+      font-size: 14px; // 进一步减小字体
       font-weight: 500;
       color: #333333;
       margin-bottom: 4px;
+      word-break: break-all;
+      overflow-wrap: break-word;
+      // 限制项目名称的行数，避免过长 - 更严格的控制
+      -webkit-line-clamp: 1; // 限制为1行防止溢出
+      -webkit-box-orient: vertical;
+      overflow: hidden;
+      line-height: 1.3;
+      width: 100%;
+      max-width: 100%;
+      
+      // 小屏幕适配
+      @media (max-width: 375px) {
+        font-size: 13px;
+      }
+      
+      @media (max-width: 320px) {
+        font-size: 12px;
+      }
     }
     
     .project-desc {
       display: block;
-      font-size: 14px;
+      font-size: 12px; // 进一步减小字体
       color: #666666;
       line-height: 1.4;
       margin-bottom: 8px;
+      word-break: break-all;
+      overflow-wrap: break-word;
+      // 限制描述的行数，避免过长
+      display: -webkit-box;
+      -webkit-line-clamp: 2;
+      -webkit-box-orient: vertical;
+      overflow: hidden;
+      
+      // 小屏幕适配
+      @media (max-width: 375px) {
+        font-size: 11px;
+        -webkit-line-clamp: 1; // 小屏幕上限制为1行
+      }
     }
     
     .share-meta {
       display: flex;
       flex-wrap: wrap;
-      gap: 12px;
+      gap: 6px 10px; // 减小间距
       
       .meta-item {
         display: flex;
         align-items: center;
-        font-size: 12px;
+        font-size: 11px; // 减小字体
         color: #999999;
+        min-width: 0;
+        flex-shrink: 1;
         
         uni-icons {
           margin-right: 2px;
+          flex-shrink: 0;
         }
       }
     }
@@ -299,11 +379,30 @@ const handleDelete = async () => {
 }
 
 .share-code-section {
+  // 确保父容器不会超出屏幕
+  width: 100%;
+  overflow: hidden;
+  
   .share-code-container {
     background-color: #f8f9fa;
     border-radius: 8px;
-    padding: 12px 16px;
+    padding: 10px 12px; // 减小内边距防止溢出
     border: 1px solid #e9ecef;
+    // 确保容器不会超出父元素 - 更严格的控制
+    box-sizing: border-box;
+    width: 100%;
+    max-width: 100%;
+    min-width: 0;
+    overflow: hidden;
+    
+    // 小屏幕适配
+    @media (max-width: 375px) {
+      padding: 8px 10px;
+    }
+    
+    @media (max-width: 320px) {
+      padding: 6px 8px;
+    }
     
     .share-code-label {
       display: block;
@@ -315,31 +414,78 @@ const handleDelete = async () => {
     .share-code {
       display: block;
       font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
-      font-size: 18px;
+      font-size: 13px; // 进一步减小字体
       font-weight: 600;
       color: #007AFF;
-      letter-spacing: 1px;
+      letter-spacing: 0px; // 完全移除字符间距防止溢出
       margin-bottom: 8px;
+      word-break: break-all;
+      overflow-wrap: break-word;
+      // 确保分享码不会溢出 - 更严格的控制
+      width: 100%;
+      max-width: 100%;
+      min-width: 0;
+      overflow: hidden;
+      line-height: 1.2;
+      // 强制在容器内换行
+      white-space: normal;
+      
+      // 小屏幕适配
+      @media (max-width: 375px) {
+        font-size: 11px;
+        letter-spacing: 0px;
+      }
+      
+      // 超小屏幕适配
+      @media (max-width: 320px) {
+        font-size: 10px;
+      }
     }
     
     .share-actions {
       display: flex;
-      gap: 8px;
+      gap: 4px; // 减小间距防止溢出
+      flex-wrap: wrap;
+      // 确保按钮行不会超出容器
+      width: 100%;
+      max-width: 100%;
+      overflow: hidden;
       
       .action-btn {
         display: flex;
         align-items: center;
-        padding: 6px 12px;
-        border-radius: 6px;
+        padding: 3px 6px; // 进一步减少内边距防止溢出
+        border-radius: 4px;
         border: 1px solid;
+        min-width: 40px; // 进一步减小最小宽度
+        max-width: calc(48% - 4px); // 更严格的最大宽度限制
+        flex: 1; // 使用flex: 1而不是flex-shrink
+        justify-content: center; // 居中对齐
+        box-sizing: border-box;
+        // 防止按钮内容溢出
+        overflow: hidden;
         
         &:active {
           opacity: 0.7;
         }
         
         .action-text {
-          font-size: 12px;
-          margin-left: 4px;
+          font-size: 11px; // 减小字体
+          margin-left: 3px; // 减小间距
+          white-space: nowrap;
+          overflow: hidden;
+          text-overflow: ellipsis;
+        }
+        
+        // 小屏幕适配
+        @media (max-width: 375px) {
+          padding: 3px 6px;
+          min-width: 45px;
+          
+          .action-text {
+            font-size: 10px;
+            margin-left: 2px;
+          }
         }
         
         &.copy-btn {
diff --git a/pages/settings/composables/useShareData.js b/pages/settings/composables/useShareData.js
index 6b377c5..fe079b1 100644
--- a/pages/settings/composables/useShareData.js
+++ b/pages/settings/composables/useShareData.js
@@ -75,6 +75,9 @@ export function useShareData() {
    * 加载我的分享列表
    */
   const loadMyShares = async () => {
+    shareLoading.value = true
+    error.value = null
+    
     try {
       const todoBookCo = uniCloud.importObject('todobook-co')
       const result = await todoBookCo.getMyShares()
@@ -88,6 +91,9 @@ export function useShareData() {
       console.error('加载分享列表失败:', err)
       error.value = err.message
       myShares.value = []
+      throw err
+    } finally {
+      shareLoading.value = false
     }
   }
 
@@ -105,8 +111,20 @@ export function useShareData() {
       const result = await todoBookCo.importByCode(shareCode)
       
       if (result.code === 0) {
-        // 触发项目册列表更新
-        uni.$emit('todobooks-updated')
+        // 导入成功后重新加载项目册列表并触发更新事件
+        // 使用 useBookData 的方法确保数据正确更新
+        const { useBookData } = await import('@/pages/todobooks/composables/useBookData.js')
+        const { refreshTodoBooks } = useBookData()
+        
+        try {
+          // 重新加载最新的项目册列表
+          await refreshTodoBooks()
+        } catch (refreshError) {
+          console.error('刷新项目册列表失败:', refreshError)
+          // 即使刷新失败，也触发一个空数组事件，防止前端接收到 undefined
+          uni.$emit('todobooks-updated', [])
+        }
+        
         uni.showToast({
           title: '导入成功',
           icon: 'success'
diff --git a/pages/settings/share-management.vue b/pages/settings/share-management.vue
index 5e25219..c48e200 100644
--- a/pages/settings/share-management.vue
+++ b/pages/settings/share-management.vue
@@ -78,7 +78,10 @@ import ImportShare from './components/ImportShare.vue'
 import { useShareData } from './composables/useShareData.js'
 
 // 组合式函数
-const { myShares, loading, loadMyShares } = useShareData()
+const { myShares, shareLoading, loadMyShares } = useShareData()
+
+// 使用shareLoading作为加载状态
+const loading = shareLoading
 
 // 响应式数据
 const scrollHeight = ref(0)
@@ -86,9 +89,12 @@ const scrollHeight = ref(0)
 // 计算属性
 const computedScrollHeight = computed(() => {
   const systemInfo = uni.getSystemInfoSync()
-  const navBarHeight = 44 // 导航栏高度
+  // 获取更准确的导航栏高度
   const statusBarHeight = systemInfo.statusBarHeight || 0
-  return systemInfo.windowHeight - navBarHeight - statusBarHeight
+  const navBarHeight = 44 + statusBarHeight // uni-nav-bar的实际高度包含状态栏
+  const safeAreaBottom = systemInfo.safeAreaInsets?.bottom || 0
+  
+  return systemInfo.windowHeight - navBarHeight - safeAreaBottom
 })
 
 // 方法
@@ -101,12 +107,22 @@ const loadShares = async () => {
     await loadMyShares()
   } catch (error) {
     console.error('加载分享列表失败:', error)
+    uni.showToast({
+      title: '加载失败',
+      icon: 'none'
+    })
   }
 }
 
 const handleDeleteShare = async (shareId) => {
-  // ShareList组件内部已处理删除逻辑和列表刷新
+  // 删除成功后重新加载分享列表
   console.log('分享已删除:', shareId)
+  
+  try {
+    await loadShares()
+  } catch (error) {
+    console.error('刷新分享列表失败:', error)
+  }
 }
 
 const handleImportSuccess = () => {
@@ -123,18 +139,28 @@ const handleImportSuccess = () => {
   }, 1500)
 }
 
+// 更新高度的方法
+const updateScrollHeight = () => {
+  scrollHeight.value = computedScrollHeight.value
+}
+
 // 生命周期
 onLoad(() => {
-  scrollHeight.value = computedScrollHeight.value
+  updateScrollHeight()
 })
 
 onShow(() => {
-  // 每次显示页面时刷新数据
+  // 每次显示页面时刷新数据和高度
+  updateScrollHeight()
   loadShares()
 })
 
 onMounted(() => {
   loadShares()
+  // 监听窗口大小变化
+  uni.onWindowResize(() => {
+    updateScrollHeight()
+  })
 })
 </script>
 
@@ -142,36 +168,77 @@ onMounted(() => {
 .share-management {
   background-color: #f8f9fa;
   min-height: 100vh;
+  display: flex;
+  flex-direction: column;
+  // 防止整个页面溢出
+  width: 100%;
+  max-width: 100vw;
+  overflow-x: hidden;
+  box-sizing: border-box;
 }
 
 .content-scroll {
-  padding: 16px;
+  padding: 12rpx 16rpx; // 使用rpx单位，小屏幕上减少padding
+  flex: 1;
+  // 防止内容区域溢出
+  width: 100%;
+  max-width: 100%;
+  overflow-x: hidden;
+  box-sizing: border-box;
+  
+  // 小屏幕适配
+  @media (max-width: 375px) {
+    padding: 8rpx 12rpx;
+  }
+  
+  // 超小屏幕适配
+  @media (max-width: 320px) {
+    padding: 6rpx 10rpx;
+  }
 }
 
 .section {
-  margin-bottom: 20px;
+  margin-bottom: 16rpx; // 使用rpx单位，减少间距
   
   &:last-child {
     margin-bottom: 0;
   }
+  
+  // 小屏幕适配
+  @media (max-width: 375px) {
+    margin-bottom: 12rpx;
+  }
 }
 
 .section-header {
   display: flex;
   align-items: center;
-  margin-bottom: 12px;
+  margin-bottom: 10rpx; // 使用rpx单位，减少间距
+  flex-wrap: wrap; // 允许换行，防止在小屏幕上溢出
   
   .section-title {
-    font-size: 18px;
+    font-size: 16px; // 减小字体
     font-weight: 600;
     color: #333333;
-    margin-left: 8px;
+    margin-left: 6px; // 减小间距
+    flex-shrink: 0;
+    
+    // 小屏幕适配
+    @media (max-width: 375px) {
+      font-size: 15px;
+    }
   }
   
   .share-count {
-    font-size: 14px;
+    font-size: 13px; // 减小字体
     color: #666666;
-    margin-left: 8px;
+    margin-left: 6px; // 减小间距
+    flex-shrink: 0;
+    
+    // 小屏幕适配
+    @media (max-width: 375px) {
+      font-size: 12px;
+    }
   }
 }
 
@@ -180,6 +247,10 @@ onMounted(() => {
   border-radius: 12px;
   overflow: hidden;
   box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
+  // 防止section内容溢出
+  width: 100%;
+  max-width: 100%;
+  box-sizing: border-box;
 }
 
 .help-content {
diff --git a/pages/test-modern/test-modern.vue b/pages/test-modern/test-modern.vue
deleted file mode 100644
index 7f8a416..0000000
--- a/pages/test-modern/test-modern.vue
+++ /dev/null
@@ -1,233 +0,0 @@
-<template>
-  <view class="modern-test-page">
-    <view class="page-header">
-      <text class="page-title">Modern 任务样式展示</text>
-      <text class="page-subtitle">新的现代化任务卡片设计</text>
-    </view>
-    
-    <view class="style-selector">
-      <button 
-        class="style-btn"
-        :class="{ active: currentStyle === 'card' }"
-        @click="switchStyle('card')">
-        卡片样式
-      </button>
-      <button 
-        class="style-btn"
-        :class="{ active: currentStyle === 'modern' }"
-        @click="switchStyle('modern')">
-        Modern样式
-      </button>
-      <button 
-        class="style-btn"
-        :class="{ active: currentStyle === 'item' }"
-        @click="switchStyle('item')">
-        列表样式
-      </button>
-    </view>
-    
-    <scroll-view class="tasks-container" scroll-y>
-      <TaskItem
-        v-for="task in sampleTasks"
-        :key="task._id"
-        :task="task"
-        :variant="currentStyle"
-        :is-pinned="task.pinned"
-        :unread-comment-count="task.unreadComments"
-        @click="handleTaskClick"
-        @statusToggle="handleStatusToggle"
-        @menuClick="handleMenuClick"
-      />
-    </scroll-view>
-  </view>
-</template>
-
-<script setup>
-import { ref } from 'vue'
-import TaskItem from '@/pages/todobooks/components/task/TaskItem.vue'
-
-const currentStyle = ref('modern')
-
-const sampleTasks = ref([
-  {
-    _id: '1',
-    title: '完成项目需求分析文档',
-    description: '详细分析用户需求，制定技术方案和开发计划',
-    priority: 'urgent',
-    status: 'todo',
-    due_date: '2024-01-15T10:00:00Z',
-    tags: [
-      { id: '1', name: '重要', color: '#FF6B6B' },
-      { id: '2', name: '文档', color: '#4ECDC4' }
-    ],
-    subtask_count: 3,
-    completed_subtask_count: 1,
-    pinned: true,
-    unreadComments: 2,
-    expanded: false
-  },
-  {
-    _id: '2',
-    title: '优化数据库查询性能',
-    description: '分析慢查询，优化索引和查询语句',
-    priority: 'high',
-    status: 'in_progress',
-    due_date: '2024-01-20T16:00:00Z',
-    tags: [
-      { id: '3', name: '性能优化', color: '#45B7D1' },
-      { id: '4', name: '数据库', color: '#96CEB4' }
-    ],
-    subtask_count: 0,
-    completed_subtask_count: 0,
-    pinned: false,
-    unreadComments: 0,
-    expanded: false
-  },
-  {
-    _id: '3',
-    title: '设计用户界面原型',
-    description: '根据需求文档设计界面原型和交互流程',
-    priority: 'medium',
-    status: 'todo',
-    tags: [
-      { id: '5', name: 'UI设计', color: '#FFEAA7' },
-      { id: '6', name: '原型', color: '#DDA0DD' }
-    ],
-    subtask_count: 5,
-    completed_subtask_count: 2,
-    pinned: false,
-    unreadComments: 1,
-    expanded: false
-  },
-  {
-    _id: '4',
-    title: '编写单元测试',
-    description: '',
-    priority: 'low',
-    status: 'completed',
-    tags: [
-      { id: '7', name: '测试', color: '#98D8C8' }
-    ],
-    subtask_count: 0,
-    completed_subtask_count: 0,
-    pinned: false,
-    unreadComments: 0,
-    expanded: false
-  },
-  {
-    _id: '5',
-    title: '部署生产环境',
-    description: '配置生产服务器，部署应用并进行测试',
-    priority: 'high',
-    status: 'todo',
-    due_date: '2024-01-25T09:00:00Z',
-    tags: [
-      { id: '8', name: '部署', color: '#FDA7DF' },
-      { id: '9', name: '生产环境', color: '#E17055' },
-      { id: '10', name: '服务器', color: '#6C5CE7' }
-    ],
-    subtask_count: 4,
-    completed_subtask_count: 1,
-    pinned: false,
-    unreadComments: 0,
-    expanded: false
-  }
-])
-
-const switchStyle = (style) => {
-  currentStyle.value = style
-}
-
-const handleTaskClick = (task) => {
-  console.log('点击任务:', task.title)
-  uni.showToast({
-    title: `点击了任务：${task.title}`,
-    icon: 'none'
-  })
-}
-
-const handleStatusToggle = (task) => {
-  console.log('切换状态:', task.title)
-  // 模拟状态切换
-  const targetTask = sampleTasks.value.find(t => t._id === task._id)
-  if (targetTask) {
-    targetTask.status = targetTask.status === 'completed' ? 'todo' : 'completed'
-  }
-}
-
-const handleMenuClick = (task) => {
-  console.log('菜单点击:', task.title)
-  uni.showActionSheet({
-    itemList: ['查看详情', '编辑', '删除', '置顶'],
-    success: (res) => {
-      const actions = ['查看详情', '编辑', '删除', '置顶']
-      uni.showToast({
-        title: `${actions[res.tapIndex]}：${task.title}`,
-        icon: 'none'
-      })
-    }
-  })
-}
-</script>
-
-<style lang="scss" scoped>
-@import '@/pages/todobooks/styles/variables.scss';
-@import '@/pages/todobooks/styles/mixins.scss';
-
-.modern-test-page {
-  min-height: 100vh;
-  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
-  padding: $padding-base;
-}
-
-.page-header {
-  text-align: center;
-  margin-bottom: $margin-xl;
-  padding-top: $padding-lg;
-  
-  .page-title {
-    display: block;
-    font-size: $font-size-xxl;
-    font-weight: $font-weight-bold;
-    color: white;
-    margin-bottom: $margin-sm;
-  }
-  
-  .page-subtitle {
-    display: block;
-    font-size: $font-size-base;
-    color: rgba(255, 255, 255, 0.8);
-  }
-}
-
-.style-selector {
-  @include flex-center;
-  gap: $margin-sm;
-  margin-bottom: $margin-xl;
-  
-  .style-btn {
-    padding: $padding-sm $padding-base;
-    border-radius: $border-radius-large;
-    background: rgba(255, 255, 255, 0.2);
-    color: white;
-    font-size: $font-size-base;
-    border: 1rpx solid rgba(255, 255, 255, 0.3);
-    transition: $transition-fast;
-    
-    &.active {
-      background: rgba(255, 255, 255, 0.9);
-      color: $text-primary;
-      font-weight: $font-weight-semibold;
-    }
-    
-    &:not(.active):active {
-      background: rgba(255, 255, 255, 0.3);
-    }
-  }
-}
-
-.tasks-container {
-  height: calc(100vh - 200rpx);
-  background: transparent;
-}
-</style>
\ No newline at end of file
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/create-share.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/create-share.js
index 10951e4..4a65809 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/create-share.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/create-share.js
@@ -26,30 +26,50 @@ module.exports = async function createShare({ todBookId, includeComments = false
     
     const originalBook = bookResult.data[0]
     
-    // 2. 检查用户分享数量限制（最多2个）
+    // 2. 检查该项目册是否已经被分享过
     const shareCollection = db.collection('todobook_shares')
-    const userSharesResult = await shareCollection.where({
+    const existingShareResult = await shareCollection.where({
       creator_id: userId
-    }).count()
+    }).get()
+    
+    // 检查是否有同一项目册的分享
+    for (const share of existingShareResult.data) {
+      // 获取已分享的项目册信息，检查是否为同一原始项目册
+      const sharedBookResult = await bookCollection.where({
+        _id: share.shared_todobook_id
+      }).get()
+      
+      if (sharedBookResult.data.length > 0) {
+        const sharedBook = sharedBookResult.data[0]
+        // 如果是从同一原始项目册创建的分享模板，则不允许重复分享
+        if (sharedBook.original_todobook_id === todBookId) {
+          return {
+            code: 1003,
+            message: '已分享此项目册，无法再次分享。请先删除已有分享。'
+          }
+        }
+      }
+    }
     
-    if (userSharesResult.total >= 2) {
+    // 3. 检查用户分享数量限制（最多2个）
+    if (existingShareResult.total >= 2) {
       return {
         code: 1002,
         message: '最多只能同时分享2个项目册，请先删除现有分享'
       }
     }
     
-    // 3. 生成唯一分享码
+    // 4. 生成唯一分享码
     const shareCode = await generateUniqueShareCode(db)
     
-    // 4. 创建分享模板项目册
+    // 5. 创建分享模板项目册
     const sharedBookId = await cloneTodoBook(db, todBookId, {
       includeComments,
       isTemplate: true,
       templateCreatorId: userId
     })
     
-    // 5. 创建分享记录
+    // 6. 创建分享记录
     const shareData = {
       share_code: shareCode,
       creator_id: userId,
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/delete-share.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/delete-share.js
index 1b73211..272a0e3 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/delete-share.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/delete-share.js
@@ -27,20 +27,26 @@ module.exports = async function deleteShare({ shareId }) {
     // 2. 删除云端分享模板项目册及相关数据
     const bookCollection = db.collection('todobooks')
     const taskCollection = db.collection('todoitems')
-    const commentCollection = db.collection('todoitems_comments')
     
-    // 删除分享模板项目册的所有评论
-    await commentCollection.where({
-      todobook_id: sharedTodoBookId
-    }).remove()
+    // 注意：评论存储在任务文档的comments数组中，会随任务一起删除
     
     // 删除分享模板项目册的所有任务
-    await taskCollection.where({
-      todobook_id: sharedTodoBookId
-    }).remove()
+    try {
+      await taskCollection.where({
+        todobook_id: sharedTodoBookId
+      }).remove()
+    } catch (error) {
+      // 如果任务集合不存在或没有相关任务，忽略错误
+      console.log('删除任务时遇到错误（可忽略）:', error.message)
+    }
     
     // 删除分享模板项目册
-    await bookCollection.doc(sharedTodoBookId).remove()
+    try {
+      await bookCollection.doc(sharedTodoBookId).remove()
+    } catch (error) {
+      // 如果项目册不存在，忽略错误
+      console.log('删除项目册时遇到错误（可忽略）:', error.message)
+    }
     
     // 3. 删除分享记录
     await shareCollection.doc(shareId).remove()
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/get-share-preview.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/get-share-preview.js
index 21880e6..9ea6597 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/get-share-preview.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/get-share-preview.js
@@ -7,17 +7,20 @@ module.exports = async function getSharePreview({ shareCode }) {
     const db = this.db
     
     // 1. 验证分享码格式
-    if (!/^[A-Za-z0-9]{6}$/.test(shareCode)) {
+    if (!/^[A-Z0-9]{6}$/.test(shareCode)) {
       return {
         code: 1001,
-        message: '请输入正确格式的分享码'
+        message: '请输入正确格式的分享码（6位大写字母+数字）'
       }
     }
     
-    // 2. 查找分享记录
+    // 2. 查找分享记录 (不区分大小写)
     const shareCollection = db.collection('todobook_shares')
     const shareResult = await shareCollection.where({
-      share_code: shareCode
+      share_code: db.RegExp({
+        regexp: '^' + shareCode.toUpperCase() + '$',
+        options: 'i'
+      })
     }).get()
     
     if (shareResult.data.length === 0) {
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
index 37aaa17..a5cebfc 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/import-by-code.js
@@ -10,17 +10,20 @@ module.exports = async function importByCode({ shareCode }) {
     const userId = this.uid
     
     // 1. 验证分享码格式
-    if (!/^[A-Za-z0-9]{6}$/.test(shareCode)) {
+    if (!/^[A-Z0-9]{6}$/.test(shareCode)) {
       return {
         code: 1001,
-        message: '请输入正确格式的分享码'
+        message: '请输入正确格式的分享码（6位大写字母+数字）'
       }
     }
     
-    // 2. 查找分享记录
+    // 2. 查找分享记录 (不区分大小写)
     const shareCollection = db.collection('todobook_shares')
     const shareResult = await shareCollection.where({
-      share_code: shareCode
+      share_code: db.RegExp({
+        regexp: '^' + shareCode.toUpperCase() + '$',
+        options: 'i'
+      })
     }).get()
     
     if (shareResult.data.length === 0) {
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/share-code-generator.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/share-code-generator.js
index d2d1d50..6d95517 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/share-code-generator.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/share-code-generator.js
@@ -7,7 +7,7 @@
  * @returns {string} 6位字母数字组合
  */
 function generateShareCode() {
-  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
+  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
   let result = ''
   for (let i = 0; i < 6; i++) {
     result += chars.charAt(Math.floor(Math.random() * chars.length))
@@ -27,9 +27,12 @@ async function generateUniqueShareCode(db, maxRetries = 10) {
   for (let i = 0; i < maxRetries; i++) {
     const shareCode = generateShareCode()
     
-    // 检查分享码是否已存在
+    // 检查分享码是否已存在 (不区分大小写)
     const existingShare = await shareCollection.where({
-      share_code: shareCode
+      share_code: db.RegExp({
+        regexp: '^' + shareCode + '$',
+        options: 'i'
+      })
     }).get()
     
     if (existingShare.data.length === 0) {
diff --git a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
index 6bc5839..04405c8 100644
--- a/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
+++ b/uniCloud-alipay/cloudfunctions/todobook-co/module/share/utils/todobook-cloner.js
@@ -54,6 +54,11 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
       last_activity_at: new Date()
     }
     
+    // 如果是分享模板，记录原始项目册ID用于重复分享检查
+    if (isTemplate) {
+      newBookData.original_todobook_id = originalBookId
+    }
+    
     // 设置创建者
     if (isTemplate && templateCreatorId) {
       newBookData.template_creator_id = templateCreatorId
@@ -93,7 +98,9 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
         // 清除完成相关时间戳
         completed_at: null,
         // 如果是分享模板，设置模板创建者
-        creator_id: isTemplate ? templateCreatorId : newCreatorId
+        creator_id: isTemplate ? templateCreatorId : newCreatorId,
+        // 处理评论：如果需要包含评论则复制，否则设为空数组
+        comments: includeComments ? (originalTask.comments || []) : []
       }
       
       const newTaskResult = await taskCollection.add(newTaskData)
@@ -119,34 +126,7 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
       }
     }
     
-    // 5. 克隆评论（如果需要）
-    if (includeComments) {
-      const commentCollection = db.collection('todoitems_comments')
-      const commentsResult = await commentCollection.where({
-        todobook_id: originalBookId
-      }).get()
-      
-      for (const originalComment of commentsResult.data) {
-        if (taskIdMapping.has(originalComment.task_id)) {
-          const newTaskId = taskIdMapping.get(originalComment.task_id)
-          const newCommentData = {
-            todobook_id: newBookId,
-            task_id: newTaskId,
-            content: originalComment.content,
-            created_at: new Date(),
-            updated_at: new Date(),
-            creator_id: isTemplate ? templateCreatorId : newCreatorId
-          }
-          
-          if (originalComment.parent_comment_id) {
-            // 对于嵌套评论，这里简化处理，暂不处理parent关系
-            // 实际项目中可能需要更复杂的映射逻辑
-          }
-          
-          await commentCollection.add(newCommentData)
-        }
-      }
-    }
+    // 5. 评论已在任务克隆时处理完毕
     
     // 6. 更新项目册任务计数
     await bookCollection.doc(newBookId).update({
@@ -154,6 +134,28 @@ async function cloneTodoBook(db, originalBookId, options = {}) {
       completed_count: 0
     })
     
+    // 7. 为导入的项目册创建成员记录（如果是用户导入，不是分享模板）
+    if (!isTemplate && newCreatorId) {
+      const { MEMBER_ROLE, PERMISSION_TYPE } = require('../../common/constants')
+      const now = new Date()
+      
+      await db.collection('todobook_members').add({
+        todobook_id: newBookId,
+        user_id: newCreatorId,
+        role: MEMBER_ROLE.OWNER,
+        permissions: [
+          PERMISSION_TYPE.READ, 
+          PERMISSION_TYPE.WRITE, 
+          PERMISSION_TYPE.DELETE, 
+          PERMISSION_TYPE.MANAGE_MEMBERS, 
+          PERMISSION_TYPE.MANAGE_SETTINGS
+        ],
+        joined_at: now,
+        last_access_at: now,
+        is_active: true
+      })
+    }
+    
     return newBookId
     
   } catch (error) {
diff --git a/uniCloud-alipay/database/db_init.json b/uniCloud-alipay/database/db_init.json
index 0d33412..7a39eee 100644
--- a/uniCloud-alipay/database/db_init.json
+++ b/uniCloud-alipay/database/db_init.json
@@ -192,6 +192,34 @@
           }
         }
       ]
+    },
+    {
+      "collectionName": "todobook_shares",
+      "indexes": [
+        {
+          "IndexName": "creator_id",
+          "MgoKeySchema": {
+            "MgoIndexKeys": [{
+              "Name": "creator_id",
+              "Direction": "1"
+            }, {
+              "Name": "created_at",
+              "Direction": "-1"
+            }],
+            "MgoIsUnique": false
+          }
+        },
+        {
+          "IndexName": "share_code",
+          "MgoKeySchema": {
+            "MgoIndexKeys": [{
+              "Name": "share_code",
+              "Direction": "1"
+            }],
+            "MgoIsUnique": true
+          }
+        }
+      ]
     }
   ],
   "functions": []
diff --git a/uniCloud-alipay/database/todobook_shares.schema.json b/uniCloud-alipay/database/todobook_shares.schema.json
index 3508821..6321cc9 100644
--- a/uniCloud-alipay/database/todobook_shares.schema.json
+++ b/uniCloud-alipay/database/todobook_shares.schema.json
@@ -14,8 +14,8 @@
 		},
 		"share_code": {
 			"bsonType": "string",
-			"pattern": "^[A-Za-z0-9]{6}$",
-			"description": "6位分享码",
+			"pattern": "^[A-Z0-9]{6}$",
+			"description": "6位分享码（大写字母+数字）",
 			"title": "分享码"
 		},
 		"creator_id": {
