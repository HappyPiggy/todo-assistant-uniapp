diff --git a/bugs/archive-time-display/report.md b/bugs/archive-time-display/report.md
new file mode 100644
index 0000000..f1e3d4e
--- /dev/null
+++ b/bugs/archive-time-display/report.md
@@ -0,0 +1,69 @@
+# Bug Report
+
+## Bug Description
+归档页面的归档项目册列表中，归档时间字段(`archived_at`)当前使用相对时间格式（今天、昨天、X天前等），但用户需要显示具体的日期时间，而不是相对时间格式。同时需要增加调试日志来验证后端返回的项目册数据是否正确。
+
+## Reproduction Steps
+1. 打开应用，导航到归档管理页面(`/pages/archive-management/index`)
+2. 查看归档项目册列表中每个项目册的显示内容
+3. 重点观察归档时间的显示格式和其他相关信息
+
+## Expected Behavior
+归档项目册列表应该显示以下完整信息：
+- 项目册图标（带颜色背景）
+- 项目册标题
+- 归档时间（具体日期时间格式，如：2024-01-15 14:30）
+- 任务统计（X任务 · X成员 · X%完成）
+- 增加调试日志显示后端返回的完整数据结构
+
+## Actual Behavior
+当前代码实现：
+- 归档时间通过`formatDate(book.archived_at)`显示为相对时间格式（今天、昨天、X天前等）
+- 缺少后端数据的调试日志，无法确认`archived_at`字段是否正确返回
+- 需要改为显示具体的日期时间格式
+- 需要增加调试信息来验证数据完整性
+
+## Environment
+- 项目：uni-app + Vue 3 + uniCloud
+- 相关文件：
+  - `/pages/archive-management/index.vue` - 归档页面主文件  
+  - `/pages/archive-management/composables/useArchiveData.js` - 数据管理
+  - `/uniCloud-alipay/cloudfunctions/todobook-co/module/todobook/get-todobooks.js` - 云函数
+  - `/uniCloud-alipay/database/todobooks.schema.json` - 数据库schema
+
+## Impact and Severity
+**Severity: Medium**
+- 用户无法看到具体的归档时间，影响对归档历史的准确了解
+- 缺少调试信息导致难以排查数据问题
+- 影响用户体验和数据可读性
+
+## Technical Analysis
+通过代码分析发现的关键信息：
+
+### 数据流程
+1. **数据获取**: `useArchiveData.loadArchivedBooks()` 调用云函数 `todobook-co.getTodoBooks({archived_only: true})`
+2. **字段返回**: 云函数应该返回 `archived_at` 字段（timestamp类型）
+3. **时间格式化**: 前端使用 `formatDate()` 函数处理相对时间显示
+4. **归档设置**: 通过 `useBookData.archiveTodoBook()` 设置 `archived_at: new Date()`
+
+### 显示内容
+归档页面每个项目册显示：
+- 图标（带颜色背景）
+- 标题
+- 归档时间：`归档于 {{ formatDate(book.archived_at) }}`
+- 统计信息：`{{ book.item_count || 0 }} 任务 · {{ book.member_count || 1 }} 成员 · {{ calculateProgress(book) }}% 完成`
+
+### 潜在问题点
+1. 云函数是否正确返回 `archived_at` 字段
+2. 时间格式化函数是否处理空值情况
+3. 统计数据（任务数、成员数、完成进度）是否准确
+
+代码结构完整，建议进行实际测试验证。

diff --git a/bugs/archive-time-display/analysis.md b/bugs/archive-time-display/analysis.md
new file mode 100644
index 0000000..e2c3f4e
--- /dev/null
+++ b/bugs/archive-time-display/analysis.md
@@ -0,0 +1,79 @@
+# Root Cause Analysis
+
+## Root Cause
+经过代码分析，问题的根本原因是：
+
+1. **时间格式化问题**: `pages/archive-management/index.vue` 中的 `formatDate()` 函数将归档时间格式化为相对时间格式（今天、昨天、X天前），而用户需要显示具体的日期时间。
+
+2. **缺少调试日志**: 当前代码缺少足够的调试日志来验证后端返回的 `archived_at` 字段数据是否正确，难以排查潜在的数据问题。
+
+## Affected Code Locations
+
+### 需要修改的文件
+1. **`/pages/archive-management/index.vue`**
+   - **修改位置**: `formatDate()` 函数 (第100-113行)
+   - **修改原因**: 当前返回相对时间格式，需要改为具体日期时间格式
+
+2. **`/pages/archive-management/composables/useArchiveData.js`**
+   - **修改位置**: `loadArchivedBooks()` 函数 (第49-92行)
+   - **修改原因**: 增加详细的调试日志，输出后端返回的完整数据结构
+
+### 当前问题代码
+```javascript
+// pages/archive-management/index.vue 第100-113行
+const formatDate = (dateString) => {
+  if (!dateString) return ''
+  const date = new Date(dateString)
+  const now = new Date()
+  const diff = now - date
+  const days = Math.floor(diff / (1000 * 60 * 60 * 24))
+  
+  if (days === 0) return '今天'
+  if (days === 1) return '昨天'
+  if (days < 7) return `${days}天前`
+  if (days < 30) return `${Math.floor(days / 7)}周前`
+  if (days < 365) return `${Math.floor(days / 30)}个月前`
+  return `${Math.floor(days / 365)}年前`
+}
+```
+
+## Fix Strategy
+
+### 1. 修改时间格式化函数
+将 `formatDate()` 函数修改为返回具体的日期时间格式：
+- 显示格式：`YYYY-MM-DD HH:mm`
+- 处理空值情况
+- 保持良好的可读性
+
+### 2. 增加调试日志
+在 `useArchiveData.js` 的 `loadArchivedBooks()` 函数中增加详细日志：
+- 记录云函数调用参数
+- 记录返回的完整数据结构
+- 特别关注 `archived_at` 字段的值和格式
+- 记录每个归档项目册的关键字段
+
+### 3. 数据验证
+确保前端正确处理后端返回的时间戳数据：
+- 验证 `archived_at` 字段存在且有效
+- 处理可能的时区问题
+- 确保时间格式化不会出错
+
+## Alternative Solutions
+
+### 方案1（推荐）: 显示具体日期时间
+- 优点：信息准确，用户可以知道确切的归档时间
+- 缺点：显示内容较长
+- 格式：`2024-01-15 14:30`
+
+### 方案2: 同时显示相对时间和具体时间
+- 优点：既有直观性又有准确性
+- 缺点：显示内容更长，可能影响UI布局
+- 格式：`2024-01-15 14:30 (3天前)`
+
+### 方案3: 可配置的时间显示格式
+- 优点：用户可以选择偏好的显示方式
+- 缺点：增加复杂性，需要额外的设置功能
+- 实现：添加用户设置选项
+
+基于用户需求和实现复杂度，推荐采用**方案1**，直接显示具体的日期时间。
+
+## Implementation Plan
+
+1. **第一步**: 修改 `formatDate()` 函数，改为返回具体日期时间格式
+2. **第二步**: 在 `useArchiveData.js` 中增加详细的调试日志
+3. **第三步**: 测试验证修改后的显示效果和数据正确性
+4. **第四步**: 确保其他使用相同函数的地方不受影响（如果有的话）

diff --git a/pages/archive-management/composables/useArchiveData.js b/pages/archive-management/composables/useArchiveData.js
index 229be87..238b026 100644
--- a/pages/archive-management/composables/useArchiveData.js
+++ b/pages/archive-management/composables/useArchiveData.js
@@ -56,20 +56,45 @@ export function useArchiveData() {
       
       // 调用云函数获取已归档项目册，包含成员信息用于统计
       const todoBookCo = uniCloud.importObject('todobook-co')
-      const result = await todoBookCo.getTodoBooks({
+      
+      // 记录调用参数
+      const requestParams = {
         include_archived: true,
         archived_only: true,
         include_members: true,  // 需要成员信息来计算去重成员数
         ...options
-      })
+      }
+      console.log('调用云函数 getTodoBooks，参数:', JSON.stringify(requestParams, null, 2))
+      
+      const result = await todoBookCo.getTodoBooks(requestParams)
       
-      console.log('归档项目册云函数返回结果:', JSON.stringify(result, null, 2))
+      console.log('归档项目册云函数返回结果 - 完整响应:', JSON.stringify(result, null, 2))
       
       if (result.code === 0) {
         const books = result.data.list || result.data || []
         archivedBooks.value = books
-        console.log('归档项目册数据加载成功，数量:', archivedBooks.value.length)
-        console.log('第一个归档项目册数据样例:', books.length > 0 ? JSON.stringify(books[0], null, 2) : '无数据')
+        
+        console.log('===================== 归档数据详细信息 =====================')
+        console.log('归档项目册数据加载成功，总数量:', books.length)
+        
+        // 详细记录每个归档项目册的关键信息
+        books.forEach((book, index) => {
+          console.log(`归档项目册 ${index + 1}:`)
+          console.log('  - ID:', book._id)
+          console.log('  - 标题:', book.title)
+          console.log('  - 是否归档:', book.is_archived)
+          console.log('  - 归档时间 (archived_at):', book.archived_at)
+          console.log('  - 归档时间类型:', typeof book.archived_at)
+          console.log('  - 任务数 (item_count):', book.item_count)
+          console.log('  - 已完成数 (completed_count):', book.completed_count)
+          console.log('  - 成员数 (member_count):', book.member_count)
+          console.log('  - 创建时间:', book.created_at)
+          console.log('  - 更新时间:', book.updated_at)
+          console.log('  - 完整数据:', JSON.stringify(book, null, 2))
+          console.log('---')
+        })
+        console.log('===================== 归档数据信息结束 =====================')
+        
         return books
       }
       throw new Error(result.message || '加载归档项目册失败')

diff --git a/pages/archive-management/index.vue b/pages/archive-management/index.vue
index 13f2683..4e64d09 100644
--- a/pages/archive-management/index.vue
+++ b/pages/archive-management/index.vue
@@ -96,20 +96,30 @@ export default {
       loadArchivedBooks
     } = useArchiveData()

-    // 格式化日期
+    // 格式化日期 - 显示具体的日期时间
     const formatDate = (dateString) => {
       if (!dateString) return ''
-      const date = new Date(dateString)
-      const now = new Date()
-      const diff = now - date
-      const days = Math.floor(diff / (1000 * 60 * 60 * 24))
       
-      if (days === 0) return '今天'
-      if (days === 1) return '昨天'
-      if (days < 7) return `${days}天前`
-      if (days < 30) return `${Math.floor(days / 7)}周前`
-      if (days < 365) return `${Math.floor(days / 30)}个月前`
-      return `${Math.floor(days / 365)}年前`
+      try {
+        const date = new Date(dateString)
+        // 检查日期是否有效
+        if (isNaN(date.getTime())) {
+          console.warn('无效的日期字符串:', dateString)
+          return dateString // 返回原始字符串作为fallback
+        }
+        
+        // 格式化为 YYYY-MM-DD HH:mm
+        const year = date.getFullYear()
+        const month = String(date.getMonth() + 1).padStart(2, '0')
+        const day = String(date.getDate()).padStart(2, '0')
+        const hours = String(date.getHours()).padStart(2, '0')
+        const minutes = String(date.getMinutes()).padStart(2, '0')
+        
+        return `${year}-${month}-${day} ${hours}:${minutes}`
+      } catch (error) {
+        console.error('格式化日期时出错:', error, '原始值:', dateString)
+        return dateString
+      }
     }

     // 计算完成进度
@@ -140,8 +150,23 @@ export default {
     // 加载数据
     const loadData = async () => {
       try {
+        console.log('归档页面开始加载数据...')
         await loadArchivedBooks()
-        console.log('归档页面数据加载完成，archivedBooks:', JSON.stringify(archivedBooks.value, null, 2))
+        
+        console.log('============ 归档页面数据加载完成 ============')
+        console.log('archivedBooks 响应式数据:', JSON.stringify(archivedBooks.value, null, 2))
+        console.log('数据数量:', archivedBooks.value.length)
+        
+        // 验证每个项目册的 archived_at 字段和格式化结果
+        archivedBooks.value.forEach((book, index) => {
+          console.log(`验证归档项目册 ${index + 1}:`)
+          console.log('  - 原始 archived_at:', book.archived_at)
+          console.log('  - 格式化后时间:', formatDate(book.archived_at))
+          console.log('  - Date 对象:', new Date(book.archived_at))
+          console.log('  - 是否有效日期:', !isNaN(new Date(book.archived_at).getTime()))
+        })
+        console.log('============ 归档页面验证完成 ============')
+        
       } catch (err) {
         console.error('加载归档数据失败:', err)
       }